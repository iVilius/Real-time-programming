package driver  // where "driver" is the folder that contains io.go, io.c, io.h, channels.go, channels.c and driver.go
/*
#cgo LDFLAGS: -lcomedi -lm
#include "io.h"
*/
import "C"
import "fmt"


const (
	NO_DIRECTION := 0
	UP := 1
	DOWN := -1		
)

func elev_init() {
	
	if (!io_init()) {
		fmt.Println("The hardware failed to initialize\n")
		return 1 // error
	
	elev_reset_lamps()
	elev_reset_orders()
	elev_set_floor(0)
		
	return 0 // success
}

func elev_set_direction(dir int) { // spør studass om navning, trenger vi speed?

	if (dir == NO_DIRECTION) {
		io_write_analog(MOTOR, 0)
		return 0
		}
	else if (dir == UP) {
		io_clear_bit(MOTORDIR)
		io_write_analog(MOTOR, 2800)
		return 0
		}
	else if (dir == DOWN) {
		io_set_bit(MOTORDIR)
		io_write_analog(MOTOR, 2800)
		return 0
		}
	else {
		fmt.Println("The given direction is invalid\n")
		return 1
		} // error
}

func elev_get_direction() {

	return io_read_bit(MOTORDIR)
}
// TO DO
func elev_set_destination_floor(floor int) {
	
	if (elev_get_latest_floor() == floor) { //dependencies?!?
		elev_set_direction(NO_DIRECTION)
		return 0
		}
	
	if (floor < elev_get_latest_floor()) {
		elev_set_direction(DOWN)
		// vente på signal
		
	}
	else if (floor > elev_get_latest_floor()) {
		elev_set_direction(UP)
		// vente på signal
	
	else {fmt.Println("Destination floor is invalid\n")
		return 1
		} //error
}

func elev_get_latest_floor() {
	
	if (io_read_bit(SENSOR_FLOOR1))
		return 0
	else if (io_read_bit(SENSOR_FLOOR2))
		return 1
	else if (io_read_bit(SENSOR_FLOOR3))
		return 2
	else if (io_read_bit(SENSOR_FLOOR4))
		return 3
	else
		return -1 // error
}

func elev_set_door_light(int value) {

	if (value)
		io_set_bit(LIGHT_DOOR_OPEN)
	else 
		io_clear_bit(LIGHT_DOOR_OPEN)
}

func elev_get_obstruction() {

	io_get_bit(OBSTRUCTION)
}

func elev_set_stop_light(int value) {

	if (value)
		io_set_bit(LIGHT_STOP)
	else
		io_clear_bit(LIGHT_STOP)
}

func elev_get_stop() {

	io_read_bit(STOP)
}

func elev_set_UPD_light(int button, int value) {

	if (value)
		io_set_bit(button)
	else
		io_clear_bit()
}

func elev_set_order_light(int button, int value) {

	if (value)
		io_set_bit(button)
	else
		io_clear_bit(button)
}

func elev_threads() {
	go elev_thread_lamps(matrix)
	go elev_thread_sensors(matrix)
	go elev_thread_buttons(matrix)
}
